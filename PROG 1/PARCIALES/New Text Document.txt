Suponer que se tienen dos matrices A y B de secuencias (de caracteres letras minusculas separados por espacios) de tamanio MAXFIL x MAXCOL 
    (cada fila empieza y termina con caracteres espacios), que estan precargadas, y ademas se tiene/n el/los siguiente/s metodo/s (se supone que existe/n 
    y esta/n implementado/s):
     _un metodo que retorna el indice inicial de la secuencia cuya cantidad de vocales es la mayor de todas de un arreglo de secuencias (de caracteres letras 
    minusculas separados por espacios) de tamanio MAXCOL (que empieza y termina con espacios).
     _un metodo que permite obtener el indice inicial de la secuencia que mas se repite de un arreglo de secuencias (de caracteres letras minusculas separados por 
    espacios) de tamanio MAXCOL (que empieza y termina con espacios).
   Se pide realizar un programa completo que (sin utilizar arreglos o matrices auxiliares extras a las mencionadas, ni realizar declaraciones explícitas 
    de las matrices):
     _contenga la definicion de el/los encabezado/s de el/los metodo/s mencionado/s como preexistente/s que figura/n en el enunciado (excepto los de carga de 
    datos en matrices, que solamente se invocan).
     _para cada fila de A elimine la secuencia con mas vocales de la fila, si la misma tiene cantidad impar de vocales y ademas es igual a la secuencia que mas 
    se repite de dicha fila en B. */

// CONSEJO: Leer con detenimiento, consultar si no se comprende algún punto en particular, dibujar o diagramar las partes a resolver. 
// Considerar los métodos que se presuponen realizados para ver donde o para que nos sirven, armar un bosquejo en pseudo código del esqueleto general

class ejemplo {
	public static final int MAXFIL = 4; // Se consideran con valores por defecto previos 
	public static final int MAXCOL = 15;  // Se consideran con valores por defecto previos
  
  	// Se corresponde al método 1 del enunciado que se supone pre existente y que devuelve el índice inicial de la secuencia con mayor cantidad de vocales de todo el arreglo
    public static int indiceInicioMayorCantVocales(char[] arr) { ... }
  
    // Se corresponde al método 2 del enunciado que se supone pre existente y que devuelve el índice inicial de la secuencia que más se repite de todo el arreglo
    public static int indiceInicioSecMayorRepeticion(char[] arr) { ... }
  
	public static void main(String[] args) {
    	char [][] matA = new char[MAXFIL][MAXCOL]; // Se presuponen pre cargadas
	    char [][] matB = new char[MAXFIL][MAXCOL]; // Se presuponen pre cargadas
        
        for (int fila = 0 ; fila < MAXFIL; fila++) {
        	int inicioA = indiceInicioMayorCantVocales(matA[fila]);
            int finA = finSecuencia(inicioA, matA[fila]); // Nos da el indice del final de la secuencia
            
            int inicioB = indiceInicioSecMayorRepeticion(matB[fila]);
            int finB = finSecuencia(inicioB, matB[fila]); // Nos retorna el fin de la secuencia
            
            int cantVocalesA = cantVocalesSecuencia(inicioA, finA, matA[fila]); // Cuenta la cantidad de vocales de una secuencia
            boolean esIgual = secuenciasIguales(inicioA, finA, matA[fila], inicioB, finB, matB[fila]);
            
            if ((cantVocalesA % 2 != 0) && esIgual) {
            	eliminarSecuencia(matA[fila], inicioA, finA); // Elimina la secuencia
            }
        }
  	}
  
    public static int cantVocalesSecuencia(int inicio, int fin, char[] arr){
        int contador = 0;
        int indice = inicio;
        while (indice <= fin) {
        	if (arr[indice] == 'a' || arr[indice] == 'e' || arr[indice] == 'i' || arr[indice] == 'o' || arr[indice] == 'u') {
          		contador++;
        	}
          	indice++;
      	}
      	return contador;																					
  	}
  
    public static int finSecuencia(int inicio, char[] arr) {
        int indice = inicio;
    	while (arr[indice] != ' ') {
          	indice++;
      	}
      	return indice--;
    }
  
    public static boolean secuenciasIguales(int inicioA, int finA, char[] a, int inicioB, int finB, char[] b) {
        int cantElementosA = finA - inicioA + 1;
        int cantElementosB = finB - inicioB + 1;
        if (cantElementosA != cantElementosB) {
        	return false;
        }
      
        indice = 0;    
        while(inidice <= cantElementosA) {
            if (a[inicioA + indice] != b[inicioB + indice]) {
           		return false;
            }
            indice++;
        }
        return true; 
    }
  
  	public static void eliminarSecuencia(char[] a, int inicioA, int finA) {
        int cantElementosA = finA - inicioA + 1;

        int iteraciones = 0;
        while (iteraciones <= cantElementosA) { // Itero la cantidad de elementos, osea hago cantElementosA iteraciones de corrimientos a izquierda
            int indice = inicioA;
            while (indice < MAXFIL) {
                a[indice] = a[indice + 1];
                indice++;
            }
            iteraciones++;
        }
    }

}
